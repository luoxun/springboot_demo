# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1


# orbs:
#   build-tools: circleci/build-tools@2.5.0
#   jq: circleci/jq@2.0
#   node: circleci/node@1.1.3
#   orb-tools: circleci/orb-tools@9.0

#machine: true
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0

    steps:
      # Checkout the code as the first step.
      - checkout


      - setup_remote_docker:
          version: 19.03.13
#          docker_layer_caching: true
      # Use mvn clean and package as the standard maven build phase
      #      - run:
      #          name: Build
      #          command: mvn -B -DskipTests clean package
      #      # Then run your tests!
      ##      - run:
      ##          name: Test
      ##          command: mvn test
      #
      - run:
          name: mvn package Artifacts
          command: mvn package
          #command: touch luoxun
#      - setup_remote_docker:
#          version: 19.03.13
#          docker_layer_caching: true
      - run:
          name: Creating Dummy Artifacts
          command: |
            export
            env

      # - run: mkdir -p workspace
      # - run: echo "Hello, world!" > workspace/echo-output

      # - store_artifacts:
      #     path: ./target/demo-0.0.1-SNAPSHOT.jar
      #     destination: demo-0.0.1-SNAPSHOT.jar
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            - ./
      # build the application image
  docker-build:


    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    machine: true

    steps:

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./ 

      # Checkout the code as the first step.
      #- checkout
      - run:
          name: docker build -t company/app:$CIRCLE_BRANCH .
          command: |
            docker -v
            pwd
            date
            env
            ls -all
            docker build -t luoxun/sp1 .   
            docker login -u docker-1626275288306 -p 08e6910c6c8e40c78fdc6c6630ff0553c7284abc turingxun-docker.pkg.coding.net
            docker tag  luoxun/sp1  turingxun-docker.pkg.coding.net/slimphp_wechat/docker/luoxunsp1:latest
            docker push turingxun-docker.pkg.coding.net/slimphp_wechat/docker/luoxunsp1:latest

      # - run:
      #     name: docker build -t company/app:$CIRCLE_BRANCH .
      #     command: |
      #       docker -v
      #       pwd
      #       date
#            sudo docker build -t luoxun/sp1 .


#      - run:
#          name: scp to
#          command: |
#                cat ~/.ssh/id_rsa.pub
#                scp -o StrictHostKeyChecking=no -r ./target/ ${DEPLOY_USER}@${DEPLOY_SERVER}:${DEPLOY_DIR}/.

#      - store_artifacts:
#          path: /tmp/artifacts
#  deploy:
#    steps:
#      - scp
#      - run:
#          name: scp to
#          command: |
#            #if [ "${CIRCLE_BRANCH}" == "circle_2_deploy" ]; then
#              scp -oStrictHostKeyChecking=no -r /home/ubuntu/mdph/dist/. ${DEPLOY_USER}@${DEPLOY_SERVER}:${DEPLOY_DIR}/.
#            #fi
workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test
      - docker-build:
          requires:
          - build-and-test    
