# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
promotion_requires: &promotion_requires
  [
    hadolint,
    test-check-command-docker,
    test-check-command-machine,
    test-check-command-macos,
    test-credentials-store-docker,
    test-credentials-store-machine,
    test-credentials-store-macos,
    publish-machine,
    publish-docker-cache,
    publish-docker-cache-not-found,
    test-pull,
    latest-alpine,
    older-alpine,
    latest-machine,
    older-machine,
    latest-mac,
    older-mac,
    latest-docker,
    older-docker,
    latest-ci-docker,
    older-ci-docker,
    latest-alpine-altogether,
    older-alpine-altogether,
    latest-machine-altogether,
    older-machine-altogether,
    latest-mac-altogether,
    older-mac-altogether,
    latest-docker-altogether,
    older-docker-altogether,
    latest-ci-docker-altogether,
    older-ci-docker-altogether,
    latest-oracle,
    older-oracle,
    latest-oracle-altogether,
    older-oracle-altogether,
    test-build-command-workspace
  ]

orbs:
  build-tools: circleci/build-tools@2.5.0
  jq: circleci/jq@2.0
  node: circleci/node@1.1.3
  orb-tools: circleci/orb-tools@9.0


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0

    steps:
      # Checkout the code as the first step.
      - checkout


      - setup_remote_docker:
          version: 19.03.13
#          docker_layer_caching: true

      # Use mvn clean and package as the standard maven build phase
      #      - run:
      #          name: Build
      #          command: mvn -B -DskipTests clean package
      #      # Then run your tests!
      ##      - run:
      ##          name: Test
      ##          command: mvn test
      #
      #      - run:
      #          name: mvn package Artifacts
      #          command: mvn package
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      #      - run:
      #          name: Creating Dummy Artifacts
      #          command: |
      #            echo "my artifact file" > /tmp/art-1;
      #            mkdir /tmp/artifacts;
      #            echo "my artifact files in a dir" > /tmp/artifacts/art-2;

      #      - store_artifacts:
      #          path: ./target/demo-0.0.1-SNAPSHOT.jar
      #          destination: demo-0.0.1-SNAPSHOT.jar

      # build the application image



      - run:
          name: docker build -t company/app:$CIRCLE_BRANCH .
          command: |
            docker -v
#            sudo docker build -t luoxun/sp1 .


#      - run:
#          name: scp to
#          command: |
#                cat ~/.ssh/id_rsa.pub
#                scp -o StrictHostKeyChecking=no -r ./target/ ${DEPLOY_USER}@${DEPLOY_SERVER}:${DEPLOY_DIR}/.

#      - store_artifacts:
#          path: /tmp/artifacts
#  deploy:
#    steps:
#      - scp
#      - run:
#          name: scp to
#          command: |
#            #if [ "${CIRCLE_BRANCH}" == "circle_2_deploy" ]; then
#              scp -oStrictHostKeyChecking=no -r /home/ubuntu/mdph/dist/. ${DEPLOY_USER}@${DEPLOY_SERVER}:${DEPLOY_DIR}/.
#            #fi
workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test
